return {
  ["<leader>"] = {
    ["a"] = { "<cmd>Alpha<cr>", "Alpha"},
    ["b"] = {
      "<cmd>lua require('telescope.builtin').buffers()<cr>",
      "Buffers",
    },
    ["w"] = { "<cmd>w!<CR>", "Save" },
    ["q"] = { "<cmd>q!<CR>", "Quit" },
    ["d"] = { "<cmd>bdelete!<CR>", "Close Buffer"},
    ["h"] = { "<cmd>nohlsearch<CR>", "No Highlight" },
    ["f"] = {
      "<cmd>lua require('telescope.builtin').find_files()<cr>",
      "Find files",
    },
    ["F"] = { "<cmd>Telescope live_grep theme=ivy<cr>", "Find Text" },
    ["P"] = { "<cmd>lua require('telescope').extensions.projects.projects()<cr>", "Projects" },

    g = {
      name = "Git",
      g = { "<cmd>lua _LAZYGIT_TOGGLE()<CR>", "Lazygit" },
      j = { "<cmd>lua require 'gitsigns'.next_hunk()<cr>", "Next Hunk" },
      k = { "<cmd>lua require 'gitsigns'.prev_hunk()<cr>", "Prev Hunk" },
      l = { "<cmd>lua require 'gitsigns'.blame_line()<cr>", "Blame"},
      p = { "<cmd>lua require 'gitsigns'.preview_hunk()<cr>", "Preview Hunk" },
      r = { "<cmd>lua require 'gitsigns'.reset_hunk()<cr>", "Reset Hunk" },
      R = { "<cmd>lua require 'gitsigns'.reset_buffer()<cr>", "Reset Buffer" },
      s = { "<cmd>lua require 'gitsigns'.stage_hunk()<cr>", "Stage Hunk" },
      u = {
        "<cmd>lua require 'gitsigns'.undo_stage_hunk()<cr>",
        "Undo Stage Hunk",
      },
      o = { "<cmd>Telescope git_status<cr>", "Open changed file" },
      b = { "<cmd>Telescope git_branches<cr>", "Checkout branch" },
      c = { "<cmd>Telescope git_commits<cr>", "Checkout commit"},
      d = {
        "<cmd>Gitsigns diffthis HEAD<cr>",
        "Diff",
      },
    },

    c = {
      name = "Code",
      a = { "<cmd>lua vim.lsp.buf.code_action()<cr>", "Code Action" },
      D = {
        "<cmd>Telescope diagnostics bufnr=0<cr>",
        "Document Diagnostics",
      },
      d = { "<cmd>lua vim.diagnostic.open_float()<CR>", "Open floating diagnostics" },
      w = {
        "<cmd>Telescope diagnostics<cr>",
        "Workspace Diagnostics",
      },
      h = { "<cmd>lua vim.lsp.buf.hover()<CR>", "Hover" },
      f = { "<cmd>lua vim.lsp.buf.format{async=true}<cr>", "Format"},
      j = {
        "<cmd>lua vim.lsp.diagnostic.goto_next()<CR>",
        "Next Diagnostic",
      },
      k = {
        "<cmd>lua vim.lsp.diagnostic.goto_prev()<cr>",
        "Previous Diagnostic",
      },
      q = { "<cmd>lua vim.diagnostic.setloclist()<cr>", "Quickfix"},
      r = { "<cmd>lua vim.lsp.buf.rename()<cr>", "Rename"},
      s = { "<cmd>Telescope lsp_document_symbols<cr>", "Document Symbols"},
      S = {
        "<cmd>Telescope lsp_dynamic_workspace_symbols<cr>",
        "Workspace Symbols",
      },
      t = { "<cmd>Telescope treesitter<cr>", "Treesitter symbols" },
      c = {
        name = "Calls",
        r = { "<cmd>Telescope lsp_references<cr>", "References" },
        i = { "<cmd>Telescope lsp_implementations<cr>", "Implementations" },
        d = { "<cmd>Telescope lsp_definitions<cr>", "Definitions" },
        t = { "<cmd>Telescope lsp_type_definitions<cr>", "Type Definitions" },
        I = { "<cmd>Telescope lsp_incoming_calls<cr>", "Incoming calls" },
        O = { "<cmd>Telescope lsp_outgoing_calls<cr>", "Outgoing calls" },
      },
    },
    s = {
      name = "Search",
      a = { "<cmd>Telescope builtin<cr>", "All pickers" },
      s = { "<cmd>Telescope spell_suggest<cr>", "Spell suggestions" },
      t = { "<cmd>Telescope colorscheme<cr>", "Colorscheme" },
      h = { "<cmd>Telescope help_tags<cr>", "Help" },
      M = { "<cmd>Telescope man_pages<cr>", "Man Pages" },
      r = { "<cmd>Telescope oldfiles<cr>", "Open Recent File" },
      m = { "<cmd>Telescope marks<cr>", "Marks" },
      R = { "<cmd>Telescope registers<cr>", "Registers" },
      k = { "<cmd>Telescope keymaps<cr>", "Keymaps" },
      c = { "<cmd>Telescope commands<cr>", "Commands" },
    },

    t = {
      name = "Terminal",
      f = { "<cmd>ToggleTerm direction=float<cr>", "Float"},
      h = { "<cmd>ToggleTerm size=10 direction=horizontal<cr>", "Horizontal"},
      v = { "<cmd>ToggleTerm size=80 direction=vertical<cr>", "Vertical"},
    },
  },
  ["<C-c>"] = { "<Esc>:", "Command prompt", mode = { "i", "v", "n" } },
  ["<C-v>"] = { "<C-o>", "Single command (Insert)", mode = { "i" } },
  ["j"] = { "gj", "Move down visually", mode = { "n", "v" }},
  ["k"] = { "gk", "Move up visually", mode = { "n", "v" }},
  ["<Down>"] = { "gj", "Move down visually", mode = { "n", "v" }},
  ["<Up>"] = { "gk", "Move up visually", mode = { "n", "v" }},
  [ "H" ] = { "^", "Go to start of line", mode = { "n", "v" } },
  [ "L" ] = { "$", "Go to end of line", mode = { "n", "v" } },
  ["<C-h>"] = { "<C-w>h", "Move to left window", mode = { "n", "i", "v" } },
  ["<C-l>"] = { "<C-w>l", "Move to right window", mode = { "n", "i", "v"} },
  ["<C-k>"] = { "<C-w>k", "Move to top window", mode = { "n", "i", "v" } },
  ["<C-j>"] = { "<C-w>j", "Move to bottom window", mode = { "n", "i", "v" } },
  ["<A-H>"] = { ":vertical resize -2<CR>", "Decrease size to the left", mode = { "n", "i", "v" } },
  ["<A-L>"] = { ":vertical resize +2<CR>", "Increase size to the right", mode = { "n", "i", "v" } },
  ["<A-K>"] = { ":resize -2<CR>", "Decrease size to the top", mode = { "n", "i", "v" } },
  ["<A-J>"] = { ":resize +2<CR>", "Increase size to the bottom", mode = { "n", "i", "v" } },
  ["<TAB>"] = { ":bnext<CR>", "Switch to next buffer", mode = { "n" } },
  ["<S-TAB>"] = { ":bprevious<CR>", "Switch to previous buffer", mode = { "n" } },
  
  ["<A-j>"] = { ":m .+1<CR>", "Move line below", mode = { "n", "i", "v"} },
  ["<A-k>"] = { ":m .-2<CR>", "Move line above", mode = { "n", "i", "v" } },
  
  ["<"] = { "<gv", "Reduce indent", mode = { "n", "v" } },
  [">"] = { ">gv", "Increase indent", mode = { "n", "v" } },

  ["<A-i>"] = { "<cmd>lua vim.lsp.buf.hover()<CR>", "Hover", modes = { "n", "i" } },
  ["<A-d>"] = { "<cmd>lua vim.diagnostic.open_float()<CR>", "Open floating diagnostics", modes = { "n", "i" } },
}
